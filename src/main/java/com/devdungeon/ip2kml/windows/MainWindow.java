/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.devdungeon.ip2kml.windows;

import com.devdungeon.ip2kml.helpers.KmlGenerator;
import com.devdungeon.ip2kml.helpers.WindowHelper;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.MediaTracker;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author dtron
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();

        loadIcons();

        setDefaultOutputFilepath();
    }

    private void setDefaultOutputFilepath() {
        String defaultOutputFile = System.getProperty("user.home") + File.separator + "output.kml";
        this.outputFilepathTextField.setText(defaultOutputFile);
    }

    private void loadIcons() {
        List<Image> icons = new ArrayList<>();
        icons.add(loadIcon("/logos/devdungeon16x16.png"));
        icons.add(loadIcon("/logos/devdungeon32x32.png"));
        icons.add(loadIcon("/logos/devdungeon48x48.png"));
        icons.add(loadIcon("/logos/devdungeon64x64.png"));
        icons.add(loadIcon("/logos/devdungeon128x128.png"));
        icons.add(loadIcon("/logos/devdungeon256x256.png"));
        setIconImages(icons);
    }

    private Image loadIcon(String name) {
        Image icon = Toolkit.getDefaultToolkit().getImage(getClass().getResource(name));
        MediaTracker mediaTracker = new MediaTracker(this);
        mediaTracker.addImage(icon, 0);
        try {
            mediaTracker.waitForID(0);
            return icon;
        } catch (Exception e1) {
            e1.printStackTrace();
        }
        return null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iplistTextfield = new javax.swing.JScrollPane();
        ipListTextArea = new javax.swing.JTextArea();
        generateButton = new javax.swing.JButton();
        outputFilepathTextField = new javax.swing.JTextField();
        outputFileLabel = new javax.swing.JLabel();
        iptextLabel = new javax.swing.JLabel();
        statusBarPanel = new com.devdungeon.ip2kml.windows.StatusBarPanel();
        chooseOutputFileButton = new javax.swing.JButton();
        openFolderButton = new javax.swing.JButton();
        mainMenubar = new javax.swing.JMenuBar();
        mainMenu = new javax.swing.JMenu();
        openFileMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        tipsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Ip2Kml");

        ipListTextArea.setColumns(20);
        ipListTextArea.setRows(5);
        ipListTextArea.setText("www.devdungeon.com\nwww.webgeno.me\n");
        ipListTextArea.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        iplistTextfield.setViewportView(ipListTextArea);

        generateButton.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        generateButton.setText("Generate");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        outputFilepathTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputFilepathTextFieldActionPerformed(evt);
            }
        });

        outputFileLabel.setText("Output File (.kml)");

        iptextLabel.setText("IP Addresses/Domain Names (One per line)");
        iptextLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        chooseOutputFileButton.setText("Choose Output File");
        chooseOutputFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseOutputFileButtonActionPerformed(evt);
            }
        });

        openFolderButton.setText("Open containing folder");
        openFolderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFolderButtonActionPerformed(evt);
            }
        });

        mainMenu.setText("File");

        openFileMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFileMenuItem.setText("Open File");
        openFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(openFileMenuItem);

        exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        mainMenu.add(exitMenuItem);

        mainMenubar.add(mainMenu);

        helpMenu.setText("Help");

        tipsMenuItem.setText("Tips");
        tipsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(tipsMenuItem);

        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        mainMenubar.add(helpMenu);

        setJMenuBar(mainMenubar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusBarPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(iplistTextfield)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(iptextLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(outputFileLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outputFilepathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooseOutputFileButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(openFolderButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(generateButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(iptextLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(iplistTextfield, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(outputFilepathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(outputFileLabel)
                    .addComponent(chooseOutputFileButton))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateButton)
                    .addComponent(openFolderButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statusBarPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void outputFilepathTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputFilepathTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_outputFilepathTextFieldActionPerformed

    private void openFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileMenuItemActionPerformed
        //Create a file chooser
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            String fileContents = getFileContents(file.getAbsolutePath());
            this.ipListTextArea.setText(fileContents);
        }

    }//GEN-LAST:event_openFileMenuItemActionPerformed

    private void chooseOutputFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseOutputFileButtonActionPerformed
        final JFileChooser fc = new JFileChooser();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("Google Earth Files (.kml)", "kml");
        fc.setFileFilter(filter);

        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fc.getSelectedFile();
            this.outputFilepathTextField.setText(file.getAbsolutePath());
        }
    }//GEN-LAST:event_chooseOutputFileButtonActionPerformed

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        String outputFile = this.outputFilepathTextField.getText();
        this.statusBarPanel.statusBarLabel.setText("Generating " + outputFile + ". Please wait...");

        // Get all the lines from the text area, complain if empty, or too many
        String[] ipList = this.ipListTextArea.getText().split("\n");

        KmlGenerator.generateKml(ipList, outputFile);

        // If everything successful
        this.statusBarPanel.statusBarLabel.setText("Generated: " + outputFile);
        // otherwise output error message in status bar
    }//GEN-LAST:event_generateButtonActionPerformed

    private void openFolderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFolderButtonActionPerformed
        File filePath = new File(this.outputFilepathTextField.getText());
        File parentPath = new File(filePath.getParentFile().getAbsolutePath());
        Desktop desktop = Desktop.getDesktop();
        try {
            desktop.open(parentPath);
        } catch (IOException ex) {
            this.statusBarPanel.statusBarLabel.setText("Error opening parent path: " + parentPath.getAbsolutePath());
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalArgumentException ex) {
            this.statusBarPanel.statusBarLabel.setText("Error opening parent path: " + parentPath.getAbsolutePath() + ". Does it exist?");
        }
    }//GEN-LAST:event_openFolderButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        //AboutWindow.AboutWindow.main();
        String[] args = new String[0];
        AboutWindow.main(args);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void tipsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipsMenuItemActionPerformed
        String[] args = new String[0];
        TipsWindow.main(args);
    }//GEN-LAST:event_tipsMenuItemActionPerformed

    private String getFileContents(String fileName) {
        String line;
        String allLines = null;
        try {
            // FileReader reads text files in the default encoding.
            FileReader fileReader
                    = new FileReader(fileName);

            try (BufferedReader bufferedReader = new BufferedReader(fileReader)) {
                while ((line = bufferedReader.readLine()) != null) {
                    allLines += line + "\n";
                }
            }
        } catch (FileNotFoundException ex) {
            System.out.println("Unable to open file '" + fileName + "'");
        } catch (IOException ex) {
            System.out.println("Error reading file '" + fileName + "'");
        }
        return allLines;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        WindowHelper.setLookAndFeel();

        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JMenuItem aboutMenuItem;
    javax.swing.JButton chooseOutputFileButton;
    javax.swing.JMenuItem exitMenuItem;
    javax.swing.JButton generateButton;
    javax.swing.JMenu helpMenu;
    javax.swing.JTextArea ipListTextArea;
    javax.swing.JScrollPane iplistTextfield;
    javax.swing.JLabel iptextLabel;
    javax.swing.JMenu mainMenu;
    javax.swing.JMenuBar mainMenubar;
    javax.swing.JMenuItem openFileMenuItem;
    javax.swing.JButton openFolderButton;
    javax.swing.JLabel outputFileLabel;
    javax.swing.JTextField outputFilepathTextField;
    com.devdungeon.ip2kml.windows.StatusBarPanel statusBarPanel;
    javax.swing.JMenuItem tipsMenuItem;
    // End of variables declaration//GEN-END:variables
}
